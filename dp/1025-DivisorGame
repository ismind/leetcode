一，collected solutions ：
1，https://leetcode.com/problems/divisor-game/discuss/274566/just-return-N-2-0-(proof)

public boolean divisorGame(int N) {
   return N % 2 == 0;   
}

2，https://leetcode.com/problems/divisor-game/discuss/296784/Come-on-in-different-explanation-from-others

public boolean divisorGame(int N) {
   return (N & 1) == 0;   
}

3，
https://leetcode.com/problems/divisor-game/discuss/274608/Simple-DP-Java-Solution

//dp[i] indicates the result of the game for the given number i and for the player who started the game.
//Alice will try all factors and choose the one which gives his opponent a losing value.

public boolean divisorGame(int N) {
    boolean[] dp = new boolean[N+1];
    dp[0] = false;
    dp[1] = false;
    for(int i=2; i <= N; i++){
        for(int j=1; j < i; j++){
            if(i % j == 0){
                if(dp[i-j] == false){
                    dp[i] = true;
                    break;
                }
            }
        }
    }
    return dp[N];
}

https://leetcode.com/problems/divisor-game/discuss/274581/Share-my-stupid-Java-dp-solution

public boolean divisorGame(int N) {
    boolean[] dp = new boolean[N+1];
    for(int i = 1; i <= N; i++){
        for(int x = 1; x < i; x++){
            if(i % x == 0 && !dp[i-x]){
                dp[i] = true;
                break;
            }
        }
    }
    return dp[N];
}

二、my opinions about those solutions:
  For 1 and 2, you need to know their thinking, the solution just has one line. 
  However, it's important to use algorithm to solve this problem.
  
